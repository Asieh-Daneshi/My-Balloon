using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using System.IO;
public class ExperimentControl_Studio : MonoBehaviour
{
    public Text textComponent_trial;
    public Text textComponent_total;
    public Text textComponent_trialCounter;
    public Text textComponent_RF01;
    public Text textComponent_RF02;
    public Text textComponent_RF03;
    public Text textComponent_RM01;
    public Text textComponent_RM03;
    public AudioSource audioSource;
    public AudioClip clip;
    public float volume = 0.5f;
    #region introduce gameObjects
    public GameObject M01;
    //public GameObject M02;
    public GameObject M03;
    public GameObject F01;
    public GameObject F02;
    public GameObject F03;
    //public GameObject coin;
    //public Rigidbody Rb;
    public GameObject FixImage;
    public GameObject InstructionsImage;

    public GameObject BalloonP;     // Participant's balloon
    public GameObject BalloonAF01;
    public GameObject BalloonAF02;
    public GameObject BalloonAF03;
    public GameObject BalloonAM01;
    //public GameObject BalloonAM02;
    public GameObject BalloonAM03;
    public GameObject particles;
    //public GameObject canvas;
    #endregion


    #region introduce animators
    Animator mAnimator1;
    Animator mAnimator2;
    Animator mAnimator3;
    Animator fAnimator1;
    Animator fAnimator2;
    Animator fAnimator3;
    #endregion
    // :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    // list of agents that disappear in each trial..................................................................................
    // in testParams, the first set is the number of the target agent, the second set is the time of the events, and the third set indicates the corresponding action
    public float[,,,,] res;
    double[,,] testParams = new double[,,] { { { 6, 1, 2, 5, 4, 3, 0 }, { 1, 2, 4, 6, 5, 3, 0 }, { 2, 3, 6, 5, 1, 4, 0 }, { 1, 6, 3, 2, 4, 5, 0 }, { 6, 2, 1, 4, 3, 5, 0 }, { 3, 2, 6, 1, 4, 5, 0 }, { 6, 4, 3, 2, 5, 1, 0 }, { 3, 6, 5, 1, 4, 2, 0 }, { 5, 4, 3, 6, 2, 1, 0 }, { 3, 5, 1, 6, 2, 4, 0 }, { 6, 5, 2, 3, 1, 4, 0 }, { 4, 3, 6, 5, 1, 2, 0 }, { 1, 4, 2, 5, 3, 6, 0 }, { 1, 5, 2, 6, 4, 3, 0 }, { 4, 2, 3, 1, 5, 6, 0 }, { 1, 4, 5, 2, 3, 6, 0 }, { 6, 4, 1, 3, 2, 5, 0 }, { 6, 1, 2, 5, 3, 4, 0 }, { 2, 6, 4, 5, 3, 1, 0 }, { 5, 1, 4, 6, 2, 3, 0 }, { 3, 1, 4, 5, 2, 6, 0 }, { 5, 3, 6, 2, 1, 4, 0 }, { 4, 2, 3, 5, 6, 1, 0 }, { 1, 6, 4, 2, 3, 5, 0 }, { 3, 4, 5, 1, 2, 6, 0 }, { 1, 2, 4, 5, 6, 3, 0 }, { 2, 3, 1, 4, 5, 6, 0 }, { 1, 2, 5, 3, 6, 4, 0 }, { 4, 6, 3, 5, 1, 2, 0 }, { 2, 6, 3, 1, 4, 5, 0 }, { 4, 6, 2, 3, 5, 1, 0 }, { 2, 6, 5, 1, 3, 4, 0 }, { 3, 5, 4, 1, 2, 6, 0 }, { 6, 1, 3, 5, 4, 2, 0 }, { 2, 6, 5, 1, 4, 3, 0 }, { 6, 3, 5, 2, 1, 4, 0 }, { 6, 4, 3, 5, 2, 1, 0 }, { 1, 6, 2, 4, 5, 3, 0 }, { 3, 4, 1, 2, 6, 5, 0 }, { 1, 3, 4, 6, 5, 2, 0 }, { 1, 4, 5, 2, 6, 3, 0 }, { 1, 4, 5, 3, 2, 6, 0 }, { 6, 1, 3, 5, 2, 4, 0 }, { 5, 4, 3, 6, 2, 1, 0 }, { 4, 3, 5, 1, 2, 6, 0 }, { 4, 3, 2, 5, 1, 6, 0 }, { 4, 1, 2, 3, 5, 6, 0 }, { 3, 4, 6, 1, 5, 2, 0 }, { 3, 1, 4, 2, 6, 5, 0 }, { 6, 1, 3, 5, 4, 2, 0 }, { 6, 5, 4, 1, 3, 2, 0 }, { 5, 2, 3, 1, 4, 6, 0 }, { 4, 6, 1, 5, 3, 2, 0 }, { 3, 5, 2, 1, 4, 6, 0 }, { 1, 4, 5, 3, 6, 2, 0 }, { 5, 4, 6, 3, 2, 1, 0 }, { 6, 2, 1, 3, 4, 5, 0 }, { 6, 2, 4, 3, 5, 1, 0 }, { 3, 4, 5, 6, 1, 2, 0 }, { 1, 2, 3, 4, 5, 6, 0 }, { 1, 4, 6, 3, 2, 5, 0 }, { 3, 6, 1, 4, 2, 5, 0 }, { 1, 3, 2, 4, 5, 6, 0 }, { 5, 6, 3, 2, 1, 4, 0 }, { 1, 4, 3, 2, 6, 5, 0 }, { 4, 5, 2, 3, 6, 1, 0 }, { 2, 4, 5, 6, 1, 3, 0 }, { 4, 2, 1, 5, 3, 6, 0 }, { 3, 2, 6, 5, 1, 4, 0 }, { 2, 5, 1, 3, 6, 4, 0 }, { 2, 5, 3, 6, 4, 1, 0 }, { 2, 5, 4, 3, 1, 6, 0 }, { 1, 6, 5, 4, 3, 2, 0 }, { 4, 6, 2, 3, 1, 5, 0 }, { 4, 1, 2, 3, 6, 5, 0 }, { 3, 1, 6, 2, 5, 4, 0 }, { 2, 4, 6, 3, 1, 5, 0 }, { 6, 5, 2, 3, 1, 4, 0 }, { 2, 1, 4, 6, 5, 3, 0 }, { 1, 3, 5, 6, 4, 2, 0 }, { 5, 4, 6, 3, 1, 2, 0 }, { 3, 1, 2, 6, 4, 5, 0 }, { 4, 6, 5, 1, 3, 2, 0 }, { 6, 4, 5, 1, 2, 3, 0 }, { 4, 2, 6, 1, 5, 3, 0 }, { 4, 5, 2, 1, 3, 6, 0 }, { 5, 3, 4, 1, 2, 6, 0 }, { 2, 1, 5, 6, 4, 3, 0 }, { 1, 6, 2, 3, 5, 4, 0 }, { 3, 1, 5, 6, 2, 4, 0 }, { 1, 4, 6, 3, 5, 2, 0 }, { 5, 2, 1, 6, 4, 3, 0 }, { 6, 5, 1, 2, 4, 3, 0 }, { 2, 4, 1, 5, 3, 6, 0 }, { 6, 5, 4, 1, 3, 2, 0 }, { 3, 2, 5, 6, 1, 4, 0 }, { 1, 6, 2, 4, 3, 5, 0 }, { 3, 1, 6, 2, 4, 5, 0 }, { 4, 3, 5, 1, 6, 2, 0 }, { 6, 3, 1, 2, 5, 4, 0 }, { 5, 3, 2, 4, 6, 1, 0 }, { 6, 1, 3, 5, 2, 4, 0 }, { 1, 3, 2, 5, 6, 4, 0 }, { 2, 3, 4, 1, 6, 5, 0 }, { 1, 2, 6, 3, 4, 5, 0 }, { 1, 4, 2, 6, 5, 3, 0 }, { 6, 3, 5, 2, 1, 4, 0 }, { 3, 1, 2, 5, 6, 4, 0 }, { 1, 2, 3, 6, 4, 5, 0 }, { 5, 1, 6, 4, 3, 2, 0 }, { 6, 2, 5, 3, 1, 4, 0 }, { 3, 5, 6, 4, 2, 1, 0 }, { 3, 5, 4, 1, 2, 6, 0 }, { 1, 4, 2, 3, 6, 5, 0 }, { 1, 3, 6, 4, 2, 5, 0 }, { 4, 5, 2, 1, 6, 3, 0 }, { 2, 4, 1, 6, 5, 3, 0 }, { 5, 6, 3, 1, 2, 4, 0 }, { 3, 1, 5, 4, 2, 6, 0 }, { 6, 2, 3, 1, 5, 4, 0 }, { 5, 2, 1, 6, 3, 4, 0 }, { 6, 3, 5, 2, 4, 1, 0 }, { 1, 6, 2, 3, 5, 4, 0 }, { 1, 6, 4, 3, 5, 2, 0 }, { 1, 4, 6, 2, 5, 3, 0 }, { 1, 5, 2, 6, 3, 4, 0 }, { 3, 2, 5, 4, 6, 1, 0 }, { 6, 4, 2, 3, 5, 1, 0 }, { 4, 1, 2, 3, 6, 5, 0 }, { 4, 3, 6, 1, 2, 5, 0 }, { 1, 4, 3, 2, 5, 6, 0 }, { 3, 2, 1, 6, 5, 4, 0 }, { 5, 2, 1, 6, 4, 3, 0 }, { 4, 1, 6, 3, 2, 5, 0 }, { 6, 2, 3, 5, 1, 4, 0 }, { 5, 6, 1, 4, 2, 3, 0 }, { 2, 4, 1, 3, 5, 6, 0 }, { 6, 2, 5, 4, 3, 1, 0 }, { 4, 3, 5, 1, 2, 6, 0 }, { 4, 5, 1, 3, 2, 6, 0 }, { 4, 3, 1, 5, 2, 6, 0 }, { 2, 6, 3, 1, 5, 4, 0 }, { 5, 3, 2, 1, 6, 4, 0 }, { 3, 2, 6, 4, 1, 5, 0 }, { 4, 6, 2, 1, 3, 5, 0 }, { 5, 2, 6, 1, 3, 4, 0 }, { 6, 1, 3, 2, 4, 5, 0 }, { 3, 5, 4, 1, 2, 6, 0 }, { 4, 2, 5, 6, 3, 1, 0 }, { 2, 5, 6, 1, 4, 3, 0 }, { 1, 4, 6, 5, 3, 2, 0 } }, { { 3.1889, 3.2764, 3.4286, 3.5529, 3.7064, 3.8242, 25 }, { 3.2518, 3.4929, 3.6026, 3.7692, 3.9721, 3.9846, 25 }, { 4.9797, 5.1671, 5.4895, 5.7499, 6.0681, 6.3103, 25 }, { 3.1527, 3.3096, 3.6855, 3.6925, 3.738, 4.1559, 25 }, { 3.2229, 3.2958, 3.6858, 3.7222, 3.8952, 4.203, 25 }, { 3.346, 3.4082, 3.6501, 3.8742, 4.0932, 4.2473, 25 }, { 5.1146, 5.6245, 5.8533, 6.1974, 6.6118, 6.6371, 25 }, { 4.9018, 5.2378, 6.025, 6.0394, 6.1333, 6.9828, 25 }, { 5.0528, 5.2085, 6.0257, 6.1006, 6.4552, 7.0774, 25 }, { 5.3151, 5.4466, 5.9518, 6.4124, 6.8568, 7.1662, 25 }, { 5.6179, 6.2655, 6.554, 6.6492, 7.293, 7.4189, 25 }, { 5.5148, 6.0702, 6.5647, 6.5874, 6.9301, 7.0089, 25 }, { 5.0066, 5.5274, 5.6508, 6.1, 6.1618, 6.1907, 25 }, { 5.3583, 5.5583, 5.6808, 5.8379, 6.09, 6.9004, 25 }, { 5.0336, 5.1204, 6.0363, 6.5198, 6.7069, 6.9436, 25 }, { 3.4898, 3.8024, 3.9437, 3.9906, 4.3107, 4.3739, 25 }, { 5.2416, 5.2471, 5.3344, 5.7603, 6.3485, 6.8547, 25 }, { 4.9292, 4.996, 5.301, 5.3265, 5.6622, 6.5441, 25 }, { 5.2375, 5.3339, 5.7212, 5.8655, 6.2681, 7.4722, 25 }, { 3.4406, 3.7074, 3.949, 3.9601, 4.1296, 4.1688, 25 }, { 5.1389, 5.2928, 5.8437, 6.1324, 6.8004, 7.2997, 25 }, { 3.2014, 3.4466, 3.5055, 3.7218, 3.7519, 3.7659, 25 }, { 3.3664, 3.4613, 3.5198, 3.5952, 3.717, 4.1149, 25 }, { 5.0077, 5.4692, 5.5974, 5.8485, 6.6262, 6.8557, 25 }, { 3.214, 3.2545, 3.691, 3.9269, 4.0191, 4.1363, 25 }, { 5.3992, 5.9414, 6.4654, 6.5838, 6.659, 7.3124, 25 }, { 3.3114, 3.314, 3.3551, 3.5579, 3.8429, 4.0922, 25 }, { 4.9895, 5.6066, 6.466, 6.9086, 7.2584, 7.3159, 25 }, { 5.3403, 5.3459, 5.3505, 6.2961, 7.148, 7.164, 25 }, { 5.1247, 5.7743, 6.0156, 6.0598, 7.1867, 7.3029, 25 }, { 3.1654, 3.1965, 3.3394, 3.3514, 3.5109, 3.9388, 25 }, { 3.3095, 3.3549, 3.5392, 3.6085, 3.8036, 4.4007, 25 }, { 3.2632, 3.3355, 3.598, 3.7376, 4.0653, 4.3141, 25 }, { 3.2019, 3.419, 3.4799, 3.6003, 3.9793, 4.0927, 25 }, { 5.5691, 5.6611, 5.6855, 5.9553, 7.0961, 7.1583, 25 }, { 5.0236, 5.1993, 5.7068, 5.7912, 5.8204, 6.5703, 25 }, { 3.3858, 3.6451, 3.9002, 3.9584, 3.9954, 4.3205, 25 }, { 3.1934, 3.4844, 3.9005, 4.1189, 4.2934, 4.3222, 25 }, { 3.3579, 3.3606, 3.3627, 3.8173, 4.2382, 4.2462, 25 }, { 3.2565, 3.5646, 3.6809, 3.7023, 4.2575, 4.3157, 25 }, { 3.4665, 3.5104, 3.5221, 3.6518, 4.2123, 4.2433, 25 }, { 4.9267, 5.7091, 6.008, 6.0389, 6.2856, 6.8544, 25 }, { 3.2093, 3.2915, 3.5323, 3.5727, 3.5868, 3.9517, 25 }, { 5.2794, 5.5947, 5.5956, 6.4022, 7.2049, 7.2731, 25 }, { 5.4753, 6.2407, 6.7737, 7.1063, 7.3679, 7.3704, 25 }, { 3.1643, 3.5333, 3.6773, 3.6922, 3.8122, 4.0921, 25 }, { 4.9183, 5.2722, 6.3891, 6.5945, 6.6481, 7.2366, 25 }, { 3.3292, 3.4787, 3.4791, 3.8692, 4.2666, 4.3008, 25 }, { 5.8831, 6.0725, 6.3726, 6.472, 6.7224, 7.0904, 25 }, { 3.4218, 3.7903, 4.0521, 4.2174, 4.3483, 4.3496, 25 }, { 4.9802, 5.1424, 5.1735, 5.1821, 5.2602, 6.5977, 25 }, { 3.1604, 3.3258, 3.8628, 3.9636, 3.99, 4.2825, 25 }, { 5.298, 5.38, 5.7081, 6.2027, 6.7432, 7.1821, 25 }, { 3.617, 3.7085, 3.8547, 3.9034, 4.0267, 4.2094, 25 }, { 3.1891, 3.2648, 3.2794, 3.2834, 3.3201, 3.9652, 25 }, { 5.0541, 5.1821, 5.7236, 5.81, 5.8649, 6.6758, 25 }, { 3.338, 3.3767, 3.5329, 3.7717, 4.037, 4.2552, 25 }, { 3.2235, 3.2834, 3.5403, 3.5818, 3.6082, 4.0037, 25 }, { 5.6123, 5.9923, 6.1603, 6.1699, 7.0702, 7.1564, 25 }, { 3.4871, 3.6697, 3.7512, 3.7558, 4.1993, 4.2424, 25 }, { 3.201, 3.5797, 3.7153, 3.7225, 3.9382, 4.2664, 25 }, { 3.1417, 3.1444, 3.4458, 3.8547, 3.9706, 3.9911, 25 }, { 5.0058, 5.8056, 6.0866, 6.1013, 6.5428, 7.2044, 25 }, { 3.2526, 3.3005, 3.321, 3.6292, 3.8261, 4.195, 25 }, { 4.8779, 4.8838, 5.5257, 6.3726, 6.6086, 6.6502, 25 }, { 3.2548, 3.6307, 3.7694, 3.7822, 3.859, 4.2571, 25 }, { 3.5916, 3.5939, 3.6998, 3.853, 4.2128, 4.2946, 25 }, { 5.1164, 5.2184, 5.262, 5.9084, 6.3141, 7.0615, 25 }, { 3.1439, 3.15, 3.1957, 3.2285, 3.9855, 4.3801, 25 }, { 5.121, 5.9116, 6.1979, 6.2242, 6.3815, 7.1859, 25 }, { 3.2982, 3.3736, 3.3813, 3.4126, 3.7074, 3.8123, 25 }, { 3.2227, 3.3103, 3.3169, 4.0241, 4.1115, 4.2942, 25 }, { 3.3572, 3.4286, 3.588, 3.7195, 3.9227, 3.9654, 25 }, { 5.8304, 5.8352, 6.0545, 6.3691, 7.0971, 7.2607, 25 }, { 4.8828, 4.8959, 4.9943, 5.0646, 6.6389, 7.4312, 25 }, { 3.237, 3.244, 3.4519, 3.7512, 4.1074, 4.2379, 25 }, { 5.2135, 5.3734, 5.3898, 5.4559, 6.0703, 6.2859, 25 }, { 3.2535, 3.4359, 3.5525, 3.761, 3.995, 3.9967, 25 }, { 3.2397, 3.6796, 3.8509, 3.996, 4.2879, 4.3795, 25 }, { 3.5215, 3.5292, 3.7297, 3.8115, 3.8569, 3.9421, 25 }, { 3.2944, 3.6344, 3.7141, 4.1408, 4.1873, 4.3606, 25 }, { 5.0523, 5.2392, 5.2533, 6.7172, 6.8935, 7.26, 25 }, { 5.3388, 5.4896, 5.823, 6.0952, 6.5114, 6.5981, 25 }, { 5.0829, 5.0979, 5.5385, 6.1605, 6.8852, 7.1473, 25 }, { 3.2347, 3.4006, 3.532, 3.5884, 3.8519, 4.0649, 25 }, { 5.1182, 5.5048, 5.7491, 6.1807, 6.6582, 6.6616, 25 }, { 5.0887, 6.0129, 6.3648, 6.6602, 7.2474, 7.4299, 25 }, { 3.3082, 3.3321, 3.4666, 3.9555, 3.9658, 4.1115, 25 }, { 3.6035, 3.7324, 4.2181, 4.2775, 4.324, 4.3288, 25 }, { 5.6843, 5.7004, 6.1162, 6.2843, 6.3771, 6.5507, 25 }, { 3.2212, 3.6744, 3.6759, 3.8315, 4.2196, 4.3173, 25 }, { 5.2055, 5.9192, 6.084, 6.9526, 7.046, 7.3924, 25 }, { 5.0779, 5.4305, 5.7063, 5.8238, 6.367, 6.7997, 25 }, { 5.2348, 5.2855, 5.5694, 6.5779, 6.599, 6.8935, 25 }, { 3.2775, 3.4492, 3.5117, 3.5944, 3.7432, 4.077, 25 }, { 3.2167, 3.2879, 3.3796, 3.4082, 3.8315, 4.1284, 25 }, { 5.8551, 6.1218, 7.1077, 7.2265, 7.3195, 7.329, 25 }, { 3.1849, 3.2221, 3.7745, 4.1436, 4.1768, 4.3105, 25 }, { 5.049, 6.0021, 6.0051, 6.3252, 7.1108, 7.3062, 25 }, { 3.5905, 3.932, 3.9748, 3.9956, 4.1099, 4.1564, 25 }, { 5.1694, 5.5329, 5.6638, 5.8363, 6.144, 6.824, 25 }, { 5.0394, 5.1915, 5.3862, 5.4464, 6.3251, 6.9275, 25 }, { 4.9712, 5.0511, 6.2084, 6.9583, 7.0249, 7.2924, 25 }, { 5.8281, 6.5302, 6.6172, 6.6593, 6.8904, 6.984, 25 }, { 3.3901, 3.3936, 3.5885, 3.6694, 3.7265, 3.8159, 25 }, { 3.2519, 3.4203, 3.7723, 3.8512, 4.1024, 4.1203, 25 }, { 5.4083, 5.4157, 5.8239, 5.9918, 6.1095, 6.2933, 25 }, { 3.1719, 3.3056, 3.3454, 3.9391, 4.1808, 4.2643, 25 }, { 5.1148, 5.4719, 6.2038, 6.3655, 6.8752, 6.9113, 25 }, { 4.9431, 5.2294, 5.3138, 6.5446, 7.033, 7.2003, 25 }, { 3.2375, 3.6025, 3.8267, 3.8358, 4.1932, 4.3684, 25 }, { 5.084, 5.8532, 6.3152, 6.334, 7.0579, 7.408, 25 }, { 3.1653, 3.2577, 3.2695, 3.6394, 3.6759, 4.0633, 25 }, { 3.4945, 3.6771, 3.6884, 3.6901, 4.143, 4.1981, 25 }, { 3.4015, 3.4317, 3.4322, 3.7222, 3.9325, 4.2739, 25 }, { 4.9289, 5.1272, 5.1523, 5.9297, 6.0052, 6.7964, 25 }, { 3.2718, 3.3858, 3.4946, 3.6793, 3.9376, 4.0793, 25 }, { 5.6278, 6.0077, 6.0309, 6.0345, 6.9571, 7.0676, 25 }, { 5.4324, 5.496, 5.4971, 6.1008, 6.5313, 7.2194, 25 }, { 3.3224, 3.3466, 3.4275, 3.7956, 4.2235, 4.3823, 25 }, { 5.1573, 5.3993, 5.6281, 6.0122, 6.5416, 6.8287, 25 }, { 5.2651, 5.3163, 5.4873, 6.2515, 7.1187, 7.4356, 25 }, { 3.156, 3.3346, 3.6092, 4.0281, 4.2553, 4.2996, 25 }, { 3.2952, 3.4128, 3.8224, 3.8273, 3.9963, 4.35, 25 }, { 4.909, 5.2908, 5.867, 6.7252, 7.1822, 7.2708, 25 }, { 3.2376, 3.387, 3.5702, 3.66, 3.712, 3.8012, 25 }, { 3.3806, 3.8303, 3.8671, 4.154, 4.2486, 4.4012, 25 }, { 5.2073, 5.4562, 6.3066, 6.3166, 6.6608, 7.3712, 25 }, { 3.2121, 3.2185, 3.4184, 3.6514, 3.9229, 3.9637, 25 }, { 3.2168, 3.5002, 3.6176, 3.6825, 3.6879, 4.1923, 25 }, { 3.1471, 3.5553, 3.6188, 3.647, 3.7966, 3.8528, 25 }, { 3.6505, 3.8495, 3.9937, 4.1926, 4.2729, 4.3704, 25 }, { 5.0841, 5.4017, 5.786, 5.9724, 6.0796, 6.2631, 25 }, { 3.2216, 3.6042, 3.7539, 3.8718, 4.1346, 4.3937, 25 }, { 5.3883, 6.3228, 6.398, 6.979, 7.1688, 7.473, 25 }, { 3.2576, 3.3069, 3.5327, 3.6017, 3.9421, 4.3067, 25 }, { 3.1898, 3.4115, 3.519, 4.0592, 4.2678, 4.3572, 25 }, { 5.0295, 5.0433, 5.468, 5.9545, 6.5117, 6.5946, 25 }, { 5.0397, 5.6398, 5.8845, 6.0187, 6.03, 7.0561, 25 }, { 3.1744, 3.3536, 3.4409, 3.6802, 3.7933, 4.0763, 25 }, { 4.8897, 5.7549, 5.8869, 5.9455, 6.2536, 6.3688, 25 }, { 3.4256, 3.4736, 3.7022, 3.7966, 3.9015, 4.0742, 25 }, { 5.9526, 6.362, 6.6554, 7.0566, 7.2174, 7.4119, 25 }, { 5.05, 5.8566, 6.166, 6.4076, 6.9401, 7.4582, 25 }, { 5.1269, 5.232, 5.7078, 5.8515, 6.5509, 7.2849, 25 }, { 4.9816, 5.4535, 5.6791, 6.788, 7.2073, 7.3855, 25 }, { 3.167, 3.3129, 3.3276, 3.7428, 3.8815, 4.14, 25 }, { 4.9486, 5.3311, 5.5155, 6.0141, 6.2469, 6.8226, 25 }, { 5.4833, 5.5841, 6.0596, 6.2536, 6.4682, 6.8184, 25 }, { 4.9325, 5.2447, 5.276, 6.1431, 6.4274, 6.951, 25 }, { 3.2935, 3.3732, 3.3738, 3.5209, 3.5934, 3.8228, 25 } }, { { 1, 1, 1, 2, 1, 2, 0 }, { 0, 0, 2, 0, 2, 1, 0 }, { 0, 1, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 2, 0 }, { 2, 2, 1, 1, 2, 2, 0 }, { 1, 2, 0, 1, 0, 0, 0 }, { 1, 0, 0, 0, 0, 0, 0 }, { 0, 2, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 2, 0 }, { 0, 0, 0, 0, 0, 2, 0 }, { 0, 0, 0, 0, 1, 0, 0 }, { 1, 0, 2, 2, 0, 0, 0 }, { 2, 0, 0, 0, 2, 2, 0 }, { 1, 2, 2, 0, 0, 0, 0 }, { 0, 0, 0, 2, 2, 2, 0 }, { 1, 2, 1, 2, 2, 1, 0 }, { 2, 0, 0, 0, 0, 0, 0 }, { 0, 1, 0, 2, 1, 0, 0 }, { 1, 1, 2, 1, 1, 1, 0 }, { 2, 1, 2, 2, 1, 1, 0 }, { 1, 0, 0, 1, 2, 0, 0 }, { 1, 2, 2, 0, 0, 0, 0 }, { 0, 1, 2, 0, 0, 1, 0 }, { 0, 2, 0, 1, 1, 0, 0 }, { 0, 0, 1, 1, 2, 0, 0 }, { 0, 0, 2, 0, 0, 0, 0 }, { 2, 2, 2, 2, 1, 2, 0 }, { 0, 2, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 1, 0, 0 }, { 2, 1, 2, 0, 0, 0, 0 }, { 2, 2, 2, 2, 1, 1, 0 }, { 0, 2, 0, 0, 2, 1, 0 }, { 2, 1, 0, 1, 0, 0, 0 }, { 0, 2, 0, 2, 0, 2, 0 }, { 2, 2, 1, 1, 2, 1, 0 }, { 0, 0, 0, 0, 1, 0, 0 }, { 2, 0, 1, 2, 0, 0, 0 }, { 0, 0, 1, 0, 2, 2, 0 }, { 0, 0, 0, 0, 2, 0, 0 }, { 1, 2, 2, 2, 1, 2, 0 }, { 0, 0, 0, 0, 0, 1, 0 }, { 2, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 2, 0, 0 }, { 1, 1, 2, 1, 2, 2, 0 }, { 2, 2, 2, 2, 2, 1, 0 }, { 2, 2, 0, 1, 0, 0, 0 }, { 0, 2, 0, 0, 1, 2, 0 }, { 0, 1, 0, 0, 0, 0, 0 }, { 2, 1, 1, 2, 2, 1, 0 }, { 2, 0, 0, 0, 0, 0, 0 }, { 0, 0, 2, 0, 0, 0, 0 }, { 0, 2, 0, 0, 0, 0, 0 }, { 1, 1, 2, 1, 2, 2, 0 }, { 1, 0, 0, 0, 2, 1, 0 }, { 0, 1, 0, 0, 0, 0, 0 }, { 1, 2, 1, 2, 2, 2, 0 }, { 2, 0, 0, 0, 2, 1, 0 }, { 1, 2, 1, 2, 1, 2, 0 }, { 1, 0, 0, 2, 0, 2, 0 }, { 1, 1, 2, 2, 1, 2, 0 }, { 0, 1, 2, 0, 2, 0, 0 }, { 2, 2, 0, 0, 0, 1, 0 }, { 1, 2, 2, 2, 1, 1, 0 }, { 0, 2, 0, 1, 2, 0, 0 }, { 2, 1, 1, 2, 1, 1, 0 }, { 0, 1, 0, 0, 0, 0, 0 }, { 0, 0, 2, 0, 0, 0, 0 }, { 1, 2, 1, 2, 1, 1, 0 }, { 1, 1, 2, 2, 2, 2, 0 }, { 0, 0, 0, 0, 0, 1, 0 }, { 0, 0, 2, 0, 0, 0, 0 }, { 1, 0, 2, 0, 1, 0, 0 }, { 1, 0, 0, 0, 0, 0, 0 }, { 2, 1, 0, 0, 2, 0, 0 }, { 2, 2, 1, 2, 1, 1, 0 }, { 1, 1, 0, 1, 0, 0, 0 }, { 2, 2, 1, 2, 1, 2, 0 }, { 1, 1, 2, 2, 1, 2, 0 }, { 2, 2, 2, 1, 2, 2, 0 }, { 0, 0, 0, 0, 0, 2, 0 }, { 1, 2, 1, 2, 2, 2, 0 }, { 0, 0, 0, 1, 0, 0, 0 }, { 0, 0, 0, 0, 0, 2, 0 }, { 0, 0, 0, 0, 1, 0, 0 }, { 1, 0, 0, 0, 2, 2, 0 }, { 0, 0, 0, 2, 0, 0, 0 }, { 2, 1, 2, 1, 2, 1, 0 }, { 1, 2, 2, 1, 1, 2, 0 }, { 0, 0, 0, 0, 1, 0, 0 }, { 0, 0, 0, 0, 0, 1, 0 }, { 0, 2, 2, 0, 0, 1, 0 }, { 1, 0, 0, 0, 0, 0, 0 }, { 1, 2, 1, 1, 2, 1, 0 }, { 1, 2, 2, 1, 2, 1, 0 }, { 0, 1, 0, 0, 0, 0, 0 }, { 1, 2, 2, 1, 2, 1, 0 }, { 2, 2, 2, 1, 1, 2, 0 }, { 0, 2, 0, 0, 0, 0, 0 }, { 1, 1, 2, 1, 1, 1, 0 }, { 0, 0, 0, 2, 0, 0, 0 }, { 1, 1, 1, 1, 1, 1, 0 }, { 2, 2, 1, 2, 1, 2, 0 }, { 1, 0, 0, 0, 0, 0, 0 }, { 1, 2, 2, 2, 1, 2, 0 }, { 2, 1, 2, 0, 0, 0, 0 }, { 0, 1, 1, 1, 0, 0, 0 }, { 2, 2, 1, 1, 1, 1, 0 }, { 0, 0, 0, 0, 2, 0, 0 }, { 1, 1, 2, 1, 1, 1, 0 }, { 2, 1, 2, 1, 1, 2, 0 }, { 1, 0, 0, 0, 0, 0, 0 }, { 2, 1, 1, 2, 2, 2, 0 }, { 0, 2, 0, 0, 1, 2, 0 }, { 1, 2, 2, 1, 1, 1, 0 }, { 1, 1, 1, 2, 2, 2, 0 }, { 1, 1, 1, 2, 2, 2, 0 }, { 2, 1, 2, 1, 1, 2, 0 }, { 0, 2, 0, 0, 2, 2, 0 }, { 0, 0, 1, 2, 1, 0, 0 }, { 2, 1, 2, 1, 1, 1, 0 }, { 0, 0, 0, 0, 2, 0, 0 }, { 1, 0, 2, 0, 1, 0, 0 }, { 0, 0, 0, 0, 0, 2, 0 }, { 2, 2, 2, 1, 2, 2, 0 }, { 0, 0, 0, 0, 0, 1, 0 }, { 0, 1, 1, 0, 1, 0, 0 }, { 0, 2, 1, 2, 0, 0, 0 }, { 2, 1, 0, 1, 0, 0, 0 }, { 0, 0, 0, 0, 2, 0, 0 }, { 1, 2, 0, 0, 2, 0, 0 }, { 1, 1, 0, 0, 0, 2, 0 }, { 0, 0, 0, 0, 2, 0, 0 }, { 0, 0, 0, 2, 0, 0, 0 }, { 0, 0, 0, 0, 0, 1, 0 }, { 2, 2, 2, 2, 1, 1, 0 }, { 0, 2, 0, 0, 1, 2, 0 }, { 1, 0, 0, 0, 0, 0, 0 }, { 2, 1, 1, 2, 2, 2, 0 }, { 0, 0, 2, 2, 0, 2, 0 }, { 2, 2, 2, 2, 1, 1, 0 }, { 2, 2, 2, 1, 1, 2, 0 }, { 1, 0, 2, 0, 2, 0, 0 }, { 2, 2, 2, 0, 0, 0, 0 }, { 0, 0, 2, 1, 1, 0, 0 }, { 2, 2, 0, 1, 0, 0, 0 }, { 1, 0, 2, 0, 1, 0, 0 }, { 0, 2, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 2, 0 }, { 2, 2, 1, 0, 0, 0, 0 }, { 2, 1, 1, 0, 0, 0, 0 }, { 2, 2, 2, 1, 2, 1, 0 } } };
    // blowSpeed[n1,n2]>>>>n1=trialCounter,n2=Agent
    double[,] blowSpeed = new double[,] { { 0.010046, 0.01522, 0.014845, 0.019229, 0.019824, 0.017116, 0.019224 }, { 0.013726, 0.014139, 0.019814, 0.012141, 0.019264, 0.013844, 0.015095 }, { 0.018477, 0.013991, 0.01468, 0.011359, 0.019376, 0.018676, 0.018474 }, { 0.016933, 0.019606, 0.016546, 0.014012, 0.014239, 0.018159, 0.017022 }, { 0.015072, 0.010022, 0.016047, 0.014386, 0.010242, 0.012016, 0.011362 }, { 0.018077, 0.011009, 0.011576, 0.017286, 0.010252, 0.013596, 0.011496 }, { 0.016774, 0.012641, 0.014301, 0.012009, 0.012294, 0.013738, 0.014138 }, { 0.016457, 0.012877, 0.012583, 0.010955, 0.015631, 0.012377, 0.018622 }, { 0.013652, 0.013305, 0.011613, 0.011631, 0.012076, 0.016563, 0.013993 }, { 0.010328, 0.012482, 0.01904, 0.019379, 0.013923, 0.017084, 0.01202 }, { 0.018026, 0.013575, 0.015232, 0.015249, 0.013244, 0.015801, 0.012479 }, { 0.016043, 0.018515, 0.018224, 0.015182, 0.012484, 0.016017, 0.014334 }, { 0.011275, 0.011012, 0.010041, 0.014351, 0.011909, 0.018428, 0.014697 }, { 0.01115, 0.010102, 0.015636, 0.013042, 0.010321, 0.016232, 0.016301 }, { 0.018559, 0.014453, 0.013233, 0.010839, 0.016609, 0.017052, 0.015625 }, { 0.012035, 0.016133, 0.014868, 0.01274, 0.015963, 0.017941, 0.019113 }, { 0.010961, 0.015423, 0.012051, 0.013695, 0.014607, 0.011695, 0.0116 }, { 0.019312, 0.013636, 0.019769, 0.010745, 0.013906, 0.010466, 0.011891 }, { 0.010803, 0.018542, 0.019611, 0.010283, 0.012487, 0.018911, 0.01518 }, { 0.015143, 0.01548, 0.018592, 0.017161, 0.012462, 0.016092, 0.017384 }, { 0.012189, 0.013213, 0.018801, 0.016, 0.014004, 0.014652, 0.016306 }, { 0.018904, 0.018611, 0.010618, 0.010262, 0.019992, 0.013069, 0.019918 }, { 0.015306, 0.019098, 0.01738, 0.017127, 0.01262, 0.019754, 0.013098 }, { 0.016348, 0.010711, 0.014822, 0.016876, 0.019776, 0.013419, 0.017353 }, { 0.01366, 0.010174, 0.01657, 0.016099, 0.016334, 0.014074, 0.018163 }, { 0.013939, 0.012817, 0.010495, 0.014031, 0.018521, 0.012912, 0.011803 }, { 0.012287, 0.016081, 0.019174, 0.010248, 0.014123, 0.015747, 0.016323 }, { 0.010596, 0.014926, 0.01287, 0.017501, 0.014267, 0.017966, 0.01322 }, { 0.011317, 0.013697, 0.011225, 0.01307, 0.019692, 0.018343, 0.016277 }, { 0.019795, 0.019402, 0.012338, 0.01811, 0.01476, 0.019813, 0.016004 }, { 0.016537, 0.018182, 0.01826, 0.013546, 0.019199, 0.011046, 0.014056 }, { 0.01262, 0.011384, 0.011366, 0.012037, 0.016089, 0.016089, 0.016969 }, { 0.018405, 0.013104, 0.012259, 0.019609, 0.01465, 0.018618, 0.014378 }, { 0.014616, 0.015951, 0.011191, 0.014726, 0.015966, 0.015283, 0.015026 }, { 0.01436, 0.010523, 0.019234, 0.010993, 0.01885, 0.010455, 0.018601 }, { 0.019254, 0.010114, 0.015841, 0.016318, 0.010394, 0.019772, 0.010223 }, { 0.017837, 0.01135, 0.018211, 0.016532, 0.010794, 0.010226, 0.010732 }, { 0.018555, 0.019597, 0.019068, 0.016506, 0.010706, 0.011304, 0.011145 }, { 0.019129, 0.013124, 0.012743, 0.012499, 0.012563, 0.011014, 0.013783 }, { 0.019884, 0.014322, 0.01569, 0.012781, 0.015113, 0.012955, 0.0178 }, { 0.011436, 0.016275, 0.012572, 0.014626, 0.011678, 0.018386, 0.013342 }, { 0.010378, 0.013421, 0.016351, 0.019376, 0.014612, 0.015158, 0.01594 }, { 0.013256, 0.014249, 0.017056, 0.015948, 0.01369, 0.010447, 0.011926 }, { 0.011387, 0.010432, 0.019595, 0.016055, 0.013701, 0.012031, 0.014835 }, { 0.011205, 0.018758, 0.018943, 0.014395, 0.018271, 0.011184, 0.015884 }, { 0.012468, 0.019794, 0.018271, 0.017726, 0.016659, 0.016589, 0.011919 }, { 0.012369, 0.01219, 0.013974, 0.014991, 0.016306, 0.017276, 0.014252 }, { 0.013241, 0.019525, 0.019449, 0.012014, 0.018609, 0.010601, 0.015439 }, { 0.013514, 0.0179, 0.013079, 0.016375, 0.018177, 0.011696, 0.015963 }, { 0.014187, 0.015375, 0.010871, 0.0191, 0.01887, 0.013812, 0.011858 }, { 0.015817, 0.019709, 0.01626, 0.014713, 0.01135, 0.019464, 0.013972 }, { 0.011652, 0.016558, 0.013292, 0.01978, 0.016884, 0.019048, 0.013105 }, { 0.01261, 0.016271, 0.014419, 0.015744, 0.010602, 0.011499, 0.010371 }, { 0.019235, 0.014008, 0.019781, 0.016596, 0.015914, 0.013947, 0.010253 }, { 0.017787, 0.0141, 0.011181, 0.017539, 0.017614, 0.012235, 0.010948 }, { 0.016893, 0.013092, 0.010934, 0.019742, 0.019444, 0.01492, 0.015888 }, { 0.015816, 0.010146, 0.01818, 0.01517, 0.015197, 0.012124, 0.010147 }, { 0.010379, 0.018913, 0.01946, 0.01397, 0.011634, 0.014113, 0.011197 }, { 0.017255, 0.018312, 0.010283, 0.018615, 0.01061, 0.018888, 0.018905 }, { 0.018661, 0.014763, 0.013174, 0.011218, 0.018178, 0.013446, 0.016509 }, { 0.019933, 0.018166, 0.012713, 0.014937, 0.013057, 0.015497, 0.012266 }, { 0.011822, 0.012695, 0.014425, 0.010589, 0.015688, 0.010301, 0.01358 }, { 0.013135, 0.015857, 0.019973, 0.014189, 0.011801, 0.016653, 0.01502 }, { 0.017937, 0.01815, 0.019918, 0.019097, 0.014456, 0.016317, 0.017363 }, { 0.016865, 0.017922, 0.010404, 0.018824, 0.013714, 0.016588, 0.011785 }, { 0.019156, 0.018753, 0.013252, 0.017129, 0.019529, 0.015354, 0.014027 }, { 0.012564, 0.018039, 0.011091, 0.016462, 0.010207, 0.017072, 0.014416 }, { 0.015935, 0.016917, 0.012802, 0.017985, 0.019646, 0.012349, 0.010854 }, { 0.01284, 0.016726, 0.012926, 0.018586, 0.016288, 0.015841, 0.018254 }, { 0.018281, 0.010497, 0.011971, 0.016908, 0.011847, 0.017348, 0.015929 }, { 0.018351, 0.019119, 0.014952, 0.015569, 0.01618, 0.015448, 0.019323 }, { 0.016141, 0.016045, 0.016961, 0.0112, 0.018273, 0.010513, 0.012287 }, { 0.015915, 0.01724, 0.019922, 0.01089, 0.012094, 0.01272, 0.01825 }, { 0.015165, 0.012761, 0.013554, 0.016679, 0.019347, 0.013719, 0.010306 }, { 0.015845, 0.014669, 0.017718, 0.015338, 0.012917, 0.016574, 0.015086 }, { 0.010257, 0.017806, 0.012822, 0.01412, 0.012649, 0.011751, 0.019884 }, { 0.017166, 0.014302, 0.015081, 0.014018, 0.010459, 0.01722, 0.01827 }, { 0.012415, 0.01237, 0.0136, 0.011002, 0.017745, 0.016739, 0.016441 }, { 0.018449, 0.011873, 0.015029, 0.010795, 0.016554, 0.014834, 0.014067 }, { 0.012945, 0.01544, 0.012962, 0.016553, 0.01861, 0.018152, 0.019388 }, { 0.015599, 0.014999, 0.012092, 0.010324, 0.016659, 0.01029, 0.010852 }, { 0.011825, 0.019505, 0.016045, 0.010816, 0.016319, 0.012747, 0.016838 }, { 0.018197, 0.013003, 0.016563, 0.013344, 0.017861, 0.012507, 0.017395 }, { 0.017145, 0.014049, 0.016324, 0.014601, 0.019834, 0.019752, 0.019511 }, { 0.019001, 0.019604, 0.012939, 0.011496, 0.013975, 0.015564, 0.011005 }, { 0.016855, 0.01404, 0.011865, 0.012722, 0.017073, 0.014008, 0.014039 }, { 0.013979, 0.011179, 0.010233, 0.019349, 0.019192, 0.011199, 0.014899 }, { 0.019468, 0.011113, 0.016624, 0.014798, 0.013095, 0.01841, 0.014858 }, { 0.012254, 0.011008, 0.010517, 0.014889, 0.017226, 0.018363, 0.014498 }, { 0.01007, 0.019776, 0.019432, 0.018128, 0.019018, 0.017781, 0.018887 }, { 0.012201, 0.017851, 0.01864, 0.010549, 0.010954, 0.010858, 0.016148 }, { 0.018174, 0.017902, 0.012091, 0.012902, 0.013338, 0.010428, 0.018992 }, { 0.011102, 0.015887, 0.019021, 0.012144, 0.017189, 0.013255, 0.016117 }, { 0.010103, 0.013738, 0.016971, 0.018051, 0.010926, 0.011563, 0.010078 }, { 0.013993, 0.014384, 0.011333, 0.010535, 0.010777, 0.01986, 0.019224 }, { 0.010342, 0.015476, 0.016509, 0.011548, 0.017656, 0.01044, 0.016103 }, { 0.015289, 0.012374, 0.016965, 0.018761, 0.015642, 0.011613, 0.014882 }, { 0.018384, 0.018915, 0.010194, 0.016687, 0.011373, 0.012029, 0.013438 }, { 0.019983, 0.014797, 0.017334, 0.011409, 0.019281, 0.014754, 0.016212 }, { 0.016732, 0.01055, 0.014416, 0.012478, 0.016217, 0.015697, 0.01024 }, { 0.013701, 0.016323, 0.01361, 0.019231, 0.013017, 0.011473, 0.010581 }, { 0.015299, 0.016548, 0.01977, 0.014778, 0.01203, 0.019719, 0.014586 }, { 0.017138, 0.017721, 0.016132, 0.015995, 0.017506, 0.013507, 0.010974 }, { 0.010637, 0.015008, 0.015945, 0.017332, 0.012991, 0.011157, 0.016147 }, { 0.016463, 0.018703, 0.016658, 0.015886, 0.012343, 0.012727, 0.018279 }, { 0.015402, 0.01728, 0.017043, 0.015634, 0.017659, 0.015882, 0.012059 }, { 0.012948, 0.011699, 0.01179, 0.011777, 0.014072, 0.016361, 0.017899 }, { 0.017917, 0.013511, 0.01666, 0.013782, 0.016979, 0.015145, 0.012766 }, { 0.017718, 0.019035, 0.018241, 0.011699, 0.019585, 0.01244, 0.012246 }, { 0.010444, 0.015336, 0.015294, 0.016262, 0.016993, 0.017225, 0.018175 }, { 0.019123, 0.015161, 0.019779, 0.014723, 0.013643, 0.01286, 0.012545 }, { 0.014175, 0.011333, 0.019703, 0.01625, 0.013836, 0.0103, 0.015381 }, { 0.014226, 0.017589, 0.01972, 0.013668, 0.013949, 0.018429, 0.01382 }, { 0.010564, 0.019329, 0.014477, 0.018897, 0.016994, 0.018175, 0.018157 }, { 0.014318, 0.019486, 0.013992, 0.01811, 0.018261, 0.019094, 0.01223 }, { 0.012931, 0.017259, 0.017416, 0.010619, 0.010254, 0.016909, 0.012717 }, { 0.014116, 0.016151, 0.017926, 0.015025, 0.015666, 0.017156, 0.014578 }, { 0.016395, 0.01863, 0.014043, 0.019765, 0.016583, 0.018105, 0.010648 }, { 0.016137, 0.019089, 0.015611, 0.019511, 0.016874, 0.016544, 0.019974 }, { 0.019503, 0.019248, 0.017991, 0.015852, 0.015933, 0.011731, 0.012857 }, { 0.010646, 0.011453, 0.011734, 0.012864, 0.017498, 0.010956, 0.019892 }, { 0.015546, 0.016826, 0.018329, 0.013517, 0.013466, 0.018664, 0.01596 }, { 0.018671, 0.010258, 0.017205, 0.016361, 0.019759, 0.015846, 0.01234 }, { 0.012396, 0.012548, 0.013977, 0.012647, 0.014203, 0.010708, 0.017204 }, { 0.015837, 0.015774, 0.010144, 0.011411, 0.015523, 0.016425, 0.016693 }, { 0.016318, 0.014951, 0.015817, 0.016893, 0.01184, 0.016697, 0.017387 }, { 0.010887, 0.013456, 0.014843, 0.018262, 0.018081, 0.013891, 0.017587 }, { 0.015406, 0.015166, 0.015151, 0.01903, 0.014972, 0.011391, 0.019531 }, { 0.010143, 0.015965, 0.015021, 0.01347, 0.010401, 0.01194, 0.012865 }, { 0.010073, 0.01852, 0.013583, 0.012099, 0.018617, 0.016143, 0.014581 }, { 0.015055, 0.015474, 0.011418, 0.010808, 0.016467, 0.017036, 0.010785 }, { 0.012226, 0.018398, 0.017603, 0.012517, 0.017909, 0.015012, 0.014176 }, { 0.012215, 0.014738, 0.014433, 0.012809, 0.013033, 0.019321, 0.017896 }, { 0.015777, 0.017498, 0.017208, 0.019526, 0.0141, 0.019596, 0.018523 }, { 0.015142, 0.016431, 0.01301, 0.019028, 0.010643, 0.0186, 0.01487 }, { 0.012233, 0.012246, 0.012381, 0.011468, 0.014306, 0.019597, 0.014652 }, { 0.013836, 0.017378, 0.010204, 0.012023, 0.017801, 0.010671, 0.019685 }, { 0.016403, 0.01324, 0.010032, 0.019197, 0.014272, 0.01959, 0.015529 }, { 0.011709, 0.019575, 0.014588, 0.016578, 0.011884, 0.016066, 0.017911 }, { 0.013227, 0.010163, 0.01489, 0.012544, 0.011491, 0.013068, 0.018313 }, { 0.016468, 0.011276, 0.013474, 0.015158, 0.015859, 0.010156, 0.016835 }, { 0.011102, 0.013083, 0.012258, 0.017082, 0.013641, 0.012562, 0.016975 }, { 0.014021, 0.012209, 0.010593, 0.019449, 0.017641, 0.010948, 0.011307 }, { 0.019297, 0.019829, 0.010458, 0.010326, 0.010044, 0.010181, 0.014376 }, { 0.01961, 0.014584, 0.014916, 0.016513, 0.019787, 0.012268, 0.012268 }, { 0.011494, 0.018287, 0.014601, 0.011567, 0.011733, 0.016369, 0.013185 }, { 0.013589, 0.012689, 0.017998, 0.01975, 0.015782, 0.018229, 0.01154 }, { 0.017904, 0.013335, 0.019537, 0.014418, 0.01624, 0.018625, 0.015086 }, { 0.014463, 0.013139, 0.01515, 0.014331, 0.014091, 0.012698, 0.012897 }, { 0.017592, 0.011284, 0.01464, 0.01182, 0.014798, 0.012696, 0.014624 }, { 0.01868, 0.018967, 0.013399, 0.016412, 0.01443, 0.013413, 0.018707 } };
    double[] burstParticipant = new double[] { 4.2995, 6.4788, 6.9437, 5.1195, 5.1393, 6.1521, 7.6941, 9.4962, 7.1183, 8.9663, 9.3015, 9.1126, 7.1054, 9.2341, 9.34, 5.1915, 9.7783, 8.2414, 6.228, 5.484, 8.564, 4.8584, 6.7129, 6.464, 5.4665, 8.1631, 5.7229, 7.0059, 9.4565, 6.8231, 4.8897, 6.4205, 4.0629, 6.0303, 8.6241, 5.7447, 5.6777, 5.2521, 6.4935, 6.515, 5.9177, 6.6768, 6.4268, 10.2314, 9.2484, 4.364, 9.1745, 4.0556, 7.7946, 5.7671, 8.86, 4.6913, 6.7135, 6.7438, 6.1206, 5.9213, 5.6735, 3.541, 8.3661, 6.12, 6.1271, 4.7116, 6.2462, 6.8436, 7.4477, 6.5103, 5.8649, 9.1413, 4.7137, 6.3027, 5.858, 5.1129, 6.0631, 6.8648, 9.1631, 5.7107, 8.3765, 4.3639, 5.5503, 4.86, 7.0191, 7.4183, 7.6495, 6.3044, 6.472, 6.8285, 7.9296, 6.6756, 5.7428, 9.1272, 3.8506, 6.771, 8.76, 9.8106, 5.5124, 4.1349, 8.2502, 4.6698, 8.0551, 5.0252, 6.6359, 7.8787, 9.7755, 7.7871, 4.1352, 4.8932, 6.7425, 6.7384, 7.9363, 9.0252, 5.6968, 9.7422, 4.4604, 4.6006, 6.6603, 8.9827, 4.4886, 6.5581, 6.2662, 6.687, 6.4875, 8.2625, 3.7934, 5.4956, 7.9988, 5.6788, 5.2454, 7.5043, 4.3454, 5.6227, 4.757, 4.5683, 8.3662, 4.7361, 8.1199, 5.6903, 7.003, 9.0164, 6.2812, 5.4771, 6.2518, 5.3223, 6.8174, 9.2704, 8.4884, 6.4099, 4.4178, 7.375, 9.0747, 8.8754, 6.5875 };
    public float startTime;
    public float refTime1;
    public float refTime2;
    public float refTime3;
    public float refTime4;
    public float outputTime;
    public float outputSize;
    public int trialTrigger;
    public int TC;
    public Vector3 scaleChangeF01;
    public Vector3 currentSizeF01;
    public float BScaleF01;
    public Vector3 scaleChangeF02;
    public Vector3 currentSizeF02;
    public float BScaleF02;
    public Vector3 scaleChangeF03;
    public Vector3 currentSizeF03;
    public float BScaleF03;
    public Vector3 scaleChangeM01;
    public Vector3 currentSizeM01;
    public float BScaleM01;
    //public Vector3 scaleChangeM02;
    //public Vector3 currentSizeM02;
    //public float BScaleM02;
    public Vector3 scaleChangeM03;
    public Vector3 currentSizeM03;
    public float BScaleM03;
    public Vector3 currentSize;
    public Vector3 scaleChange;
    public double BScale;

    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    #region initializing the CSV file
    string filename = "";

    [System.Serializable]
    public class Player
    {
        public string name;
        public int health;
        public int damage;
    }
    [System.Serializable]
    public class PlayerList
    {
        public Player[] Player;
    }

    public PlayerList myPlayerList = new PlayerList();
    #endregion
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



    // Start is called before the first frame update................................................................................
    void Start()
    {
        filename = Application.dataPath + "/" + System.DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss") + "_test_A4.CSV";
        //Rb = coin.GetComponent<Rigidbody>();
        res = new float[,,,,] { { { { { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 } } } } };
        Coroutine a = StartCoroutine(MainLoopTrials(res));     // all the important things happen in this coroutine
        ParticleSystem.EmissionModule emi = GetComponent<ParticleSystem>().emission;    // deactivate particle system at the beginning of experiment
        emi.enabled = false;
    }


    void Update()
    {
        //#region control the coin loop
        //Physics.gravity = new Vector3(0.0f, -.1f, 0.0f);
        //Rb.AddForce(new Vector3(0, -(Time.time - startTime) * Rb.mass / 100, 0));
        //if (coin.transform.position[1] < 0.95f)   // if the coin reached the box, start over..........................................
        //{
        //    //Physics.gravity = new Vector3(0.0f, -Mathf.Pow(2, (Time.time-startTime)) * 0.01f, 0.0f);
        //    coin.transform.position = new Vector3(47.22307f, 3f, -41.98611f);   // change the vertical position of the coin to the first point
        //    Rb.velocity = new Vector3(0, 0, 0);
        //}
        //#endregion
    }


    // ***********************************************************************************************************************************
    // ***********************************************************************************************************************************
    IEnumerator MainLoopTrials(float[,,,,] responses)
    {
        int trialCounter;
        int numberofTrials = 150;
        int AgentCounter;
        int terminateFactor = 0;    // when the participant releases the space key, the trial terminates
        float reward = 0;
        float trialReward;


        ParticleSystem.EmissionModule emi = GetComponent<ParticleSystem>().emission;    // initialize particle system that will be activated when a balloon bursts

        //scaleChange = new Vector3((float).001, (float).001, (float).001);

        // introducing animators .........................................................................................................
        fAnimator1 = F01.GetComponent<Animator>();
        fAnimator2 = F02.GetComponent<Animator>();
        fAnimator3 = F03.GetComponent<Animator>();
        mAnimator1 = M01.GetComponent<Animator>();
        //mAnimator2 = M02.GetComponent<Animator>();
        mAnimator3 = M03.GetComponent<Animator>();
        // *******************************************************************************************************************************
        #region Instructions
        InstructionsImage.SetActive(true);   // at the beginning of experiment, show the Instructions
        void OnGUI()
        {
            GUI.Label(new Rect(50, 0, 1000, 2000), "Hello World!");
        }
        while (!(Input.GetKey(KeyCode.Return)))
        {
            yield return null;
        }
        InstructionsImage.SetActive(false);
        #endregion
        // *******************************************************************************************************************************
        #region loop on trials 
        for (trialCounter = 0; trialCounter < numberofTrials; trialCounter++)
        {
            print("Asi:" + trialCounter + "," + testParams[2, 150, 0] + blowSpeed[150, 0]);
            emi.enabled = false;
            terminateFactor = 0;
            trialReward = 1;
            // set the position of agents at the beginning of each trial. It is necessary because in some trials, when the balloon bursts, the participant gets too shocked and takes one step back!
            F01.transform.position = new Vector3(49.46f, 0f, -41.64f);
            F02.transform.position = new Vector3(48.61f, 0f, -41.34f);
            F03.transform.position = new Vector3(47.39f, 0f, -40.07f);
            M01.transform.position = new Vector3(47.87f, 0f, -40.87f);
            //M02.transform.position = new Vector3(47.41962f, 0f, -39.89147f);
            M03.transform.position = new Vector3(47.13f, 0f, -39.08f);
            // ***************************************************************************************************************************
            //F01.transform.Rotate(0f, -7.037f, 0f, Space.Self);
            //F02.transform.Rotate(0f, 0f, 0f, Space.Self);
            //F03.transform.Rotate(0f, 63.494f, 0f, Space.Self);
            //M01.transform.Rotate(0f, 15.639f, 0f, Space.Self);
            //M02.transform.Rotate(0f, 81.312f, 0f, Space.Self);
            //M03.transform.Rotate(0f, 95.889f, 0f, Space.Self);

            // deactivate (disappear) all the balloons at the beginning of each trial
            BalloonAF01.SetActive(false);
            BalloonAF02.SetActive(false);
            BalloonAF03.SetActive(false);
            BalloonAM01.SetActive(false);
            //BalloonAM02.SetActive(false);
            BalloonAM03.SetActive(false);

            // **********************************************************************************************************************
            BalloonP.SetActive(false);
            //canvas.SetActive(true);
            //CanvasObject.GetComponent<Canvas>().enabled = false;
            FixImage.SetActive(true);   // at the beginning of each trial, show the fication image
            // reset all the animators ..............................................................................................
            fAnimator1.Rebind();
            fAnimator2.Rebind();
            fAnimator3.Rebind();
            mAnimator1.Rebind();
            //mAnimator2.Rebind();
            mAnimator3.Rebind();

            yield return new WaitForSeconds(1.5f);      // show the fixation image for 0.5 seconds ..................................
            // after 0.5 seconds showing the fixation image, if still the participant is not pressing the space key, don't start the trial. Start if only the fixation image has been showed for 0.5 seconds, and also the participant holds the space key!
            textComponent_RF01.enabled = false;
            textComponent_RF02.enabled = false;
            textComponent_RF03.enabled = false;
            textComponent_RM01.enabled = false;
            textComponent_RM03.enabled = false;
            while (!(Input.GetKey("space")))
            {
                yield return null;
            }
            FixImage.SetActive(false);  // deactivate the fixation image, so that the experimental environment is visible!
            BalloonP.SetActive(true);
            BalloonP.transform.localScale = new Vector3(0f, 0f, 0f); // set the initial size of the participant's balloon
            #region Start blowing
            for (AgentCounter = 0; AgentCounter < 6; AgentCounter++)    // loop over agents to assign which ones are active
            {
                if (testParams[2, trialCounter, AgentCounter] != 0)     // check the third set of testparams to see if an action is required or not (1: burst, 2: quit, 0: nothing), in case of burst or quit, agent must start blowing anyway!
                {
                    switch (testParams[0, trialCounter, AgentCounter])
                    {
                        case 1:
                            print("F1 started!");
                            fAnimator1.SetInteger("Start", 1);  // after the agent starts blowing, wait for 0.2 seconds so that the agent has enough time to get the blowing posture, and then the balloon starts inflating
                            yield return new WaitForSeconds(.1f);
                            BalloonAF01.SetActive(true);
                            BalloonAF01.transform.localScale = new Vector3(0f, 0f, 0f);
                            textComponent_RF01.enabled = true;
                            break;
                        case 2:
                            print("F2 started!");
                            fAnimator2.SetInteger("Start", 1);
                            yield return new WaitForSeconds(.1f);
                            BalloonAF02.SetActive(true);
                            BalloonAF02.transform.localScale = new Vector3(0f, 0f, 0f);
                            textComponent_RF02.enabled = true;
                            break;
                        case 3:
                            print("F3 started!");
                            fAnimator3.SetInteger("Start", 1);
                            yield return new WaitForSeconds(.1f);
                            BalloonAF03.SetActive(true);
                            BalloonAF03.transform.localScale = new Vector3(0f, 0f, 0f);
                            textComponent_RF03.enabled = true;
                            break;
                        case 4:
                            print("M1 started!");
                            mAnimator1.SetInteger("Start", 1);
                            yield return new WaitForSeconds(.1f);
                            BalloonAM01.SetActive(true);
                            BalloonAM01.transform.localScale = new Vector3(0f, 0f, 0f);
                            textComponent_RM01.enabled = true;
                            break;
                        case 5:
                            print("M3 started!");
                            mAnimator3.SetInteger("Start", 1);
                            yield return new WaitForSeconds(.1f);
                            BalloonAM03.SetActive(true);
                            BalloonAM03.transform.localScale = new Vector3(0f, 0f, 0f);
                            textComponent_RM03.enabled = true;
                            break;
                    }
                }
            }
            #endregion

            Coroutine b = StartCoroutine(AgentsBalloonsInflate(trialCounter, BalloonAF01, BalloonAF02, BalloonAF03, BalloonAM01, BalloonAM03, textComponent_RF01, textComponent_RF02, textComponent_RF03, textComponent_RM01, textComponent_RM03));     // Agents' Balloons start to expand

            currentSize = new Vector3(.1f, .1f, .1f);
            refTime1 = Time.time;                        // save the time after idle phase at the beginning of each trial
            for (AgentCounter = 0; AgentCounter < 7; AgentCounter++)    // loop over agents to control them
            {
                //audioData.UnPause();
                // the strategy is to go for each time point that one of the agents is supposed to make a specific action, then continue to the next time point, and so on...
                while ((Time.time - refTime1) <= (testParams[1, trialCounter, AgentCounter]))
                {
                    //print("time:" + (Time.time - refTime1) + "testParam:" + testParams[1, trialCounter, AgentCounter]);
                    //if ((currentSize[1] < 3f) && (Input.GetKey("space")))   // if the participant's balloon is smaller than the currentSize, and the participant is holding the space key, then participant's balloon keeps inflating
                    if ((Time.time - refTime1 < (float)burstParticipant[trialCounter]) && (Input.GetKey("space")))   // if the participant's balloon is smaller than the currentSize, and the participant is holding the space key, then participant's balloon keeps inflating
                    {
                        //BScale = Random.Range(0.001f, 0.01f);
                        //scaleChange = new Vector3(BScale, BScale, BScale);
                        BScale = blowSpeed[trialCounter, 6];
                        scaleChange = new Vector3((float)BScale, (float)BScale, (float)BScale);
                        BalloonP.transform.localScale += scaleChange / 5;
                        BalloonP.transform.Translate(0, -0.00005f, 0);
                        currentSize = new Vector3(BalloonP.transform.localScale[0], BalloonP.transform.localScale[1], BalloonP.transform.localScale[2]);
                        //refTime2 = Time.time;    // save the reference time for the balloon burst initiation
                        trialReward = Mathf.RoundToInt(currentSize[1] * 25);
                        //print("time:" + (Time.time - refTime1) + "testParam:" + testParams[1, trialCounter, AgentCounter]);
                        //print("score: " + trialReward);
                        textComponent_trial.text = "Score: " + trialReward;
                        textComponent_trialCounter.text = "#" + (trialCounter + 1);
                        textComponent_total.text = "Total Score: " + reward;
                    }
                    // when threshold is reached, activate particle system (simulating burst) for a glance (0.2 sec) and also deactivate Balloon
                    //else if ((currentSize[1] >= 3f) && (Input.GetKey("space")))   // participant is still holding the space key
                    else if ((Time.time - refTime1 >= (float)burstParticipant[trialCounter]) && (Input.GetKey("space")))   // participant is still holding the space key
                    {
                        terminateFactor = 1;
                        outputTime = Time.time - refTime1;
                        outputSize = currentSize[1];
                        responses[0, 0, 0, trialCounter, 0] = outputTime;
                        responses[0, 0, 0, trialCounter, 1] = outputSize;
                        responses[0, 0, 0, trialCounter, 2] = 1;
                        responses[0, 0, 0, trialCounter, 3] = trialReward;
                        responses[0, 0, 0, trialCounter, 4] = reward;
                        print("SSSSSSSSSSSSSSSSSSSSSS:" + responses[0, 0, 0, trialCounter, 2]);
                        refTime2 = Time.time;
                        //emi.enabled = true;
                        trialReward = 0;
                        textComponent_trial.text = "You lost your reward";
                        textComponent_total.text = "Total Score: " + reward;
                        //if (Time.time >= refTime2 + 0.06)
                        //{
                        //    print(refTime2);
                        //    BalloonP.SetActive(false);
                        //    emi.enabled = false;
                        //}
                        AgentCounter = 6; // I do it, to also break the "for loop"; because when the participant terminates the experiment or his/her balloon bursts, the trial must also be terminated!
                        break;
                    }
                    // if the participant releases the space key, the trial is terminated
                    else if (!(Input.GetKey("space")))
                    {
                        terminateFactor = 1;
                        outputTime = Time.time - refTime1;
                        outputSize = currentSize[1];
                        responses[0, 0, 0, trialCounter, 0] = outputTime;
                        responses[0, 0, 0, trialCounter, 1] = outputSize;
                        responses[0, 0, 0, trialCounter, 2] = 2;
                        responses[0, 0, 0, trialCounter, 3] = trialReward;
                        //responses[0, 0, 0, trialCounter, 4] = reward;
                        print("SSSSSSSSSSSSSSSSSSSSSS:" + responses[0, 0, 0, trialCounter, 2]);
                        reward = reward + trialReward;
                        responses[0, 0, 0, trialCounter, 4] = reward;
                        textComponent_total.text = "Total Score: " + reward;
                        AgentCounter = 6;
                        break;
                    }
                    yield return new WaitForSeconds(0.02f);
                }

                if (terminateFactor == 0)     // if the participant has not terminated the trial!
                {
                    if (testParams[2, trialCounter, AgentCounter] == 1)     // look at the current third set of testParams which indicates the corresponding action (1: burst, 2: quit, 0: nothing)
                    {
                        switch (testParams[0, trialCounter, AgentCounter])
                        {
                            case 1:
                                fAnimator1.SetInteger("Burst", 1);  // 1:Burst; 3:Look right; 4:Look left; 2: Quit
                                audioSource.PlayOneShot(clip, volume);
                                BalloonAF01.SetActive(false);
                                print("F1Burst");
                                //fAnimator2.SetInteger("Burst", 2);
                                //fAnimator3.SetInteger("Burst", 2);
                                //mAnimator1.SetInteger("Burst", 2);
                                //mAnimator2.SetInteger("Burst", 2);
                                //mAnimator3.SetInteger("Burst", 2);
                                break;
                            case 2:
                                //fAnimator1.SetInteger("Burst", 3);
                                fAnimator2.SetInteger("Burst", 1);
                                audioSource.PlayOneShot(clip, volume);
                                BalloonAF02.SetActive(false);
                                print("F2Burst");
                                //fAnimator3.SetInteger("Burst", 2);
                                //mAnimator1.SetInteger("Burst", 2);
                                //mAnimator2.SetInteger("Burst", 2);
                                //mAnimator3.SetInteger("Burst", 2);
                                break;
                            case 3:
                                //fAnimator1.SetInteger("Burst", 3);
                                //fAnimator2.SetInteger("Burst", 3);
                                fAnimator3.SetInteger("Burst", 1);
                                audioSource.PlayOneShot(clip, volume);
                                BalloonAF03.SetActive(false);
                                print("F3Burst");
                                //mAnimator1.SetInteger("Burst", 3);
                                //mAnimator2.SetInteger("Burst", 2);
                                //mAnimator3.SetInteger("Burst", 2);
                                break;
                            case 4:
                                //fAnimator1.SetInteger("Burst", 3);
                                //fAnimator2.SetInteger("Burst", 3);
                                //fAnimator3.SetInteger("Burst", 2);
                                mAnimator1.SetInteger("Burst", 1);
                                audioSource.PlayOneShot(clip, volume);
                                BalloonAM01.SetActive(false);
                                print("M1Burst");
                                //mAnimator2.SetInteger("Burst", 2);
                                //mAnimator3.SetInteger("Burst", 2);
                                break;
                            case 5:
                                //fAnimator1.SetInteger("Burst", 3);
                                //fAnimator2.SetInteger("Burst", 3);
                                //fAnimator3.SetInteger("Burst", 3);
                                //mAnimator1.SetInteger("Burst", 3);
                                //mAnimator2.SetInteger("Burst", 3);
                                mAnimator3.SetInteger("Burst", 1);
                                audioSource.PlayOneShot(clip, volume);
                                print("M3Burst");
                                BalloonAM03.SetActive(false);
                                break;
                        }
                    }
                    else if (testParams[2, trialCounter, AgentCounter] == 2)
                    {
                        switch (testParams[0, trialCounter, AgentCounter])
                        {
                            case 1:
                                print("F1Quit");
                                fAnimator1.SetInteger("Burst", 2);
                                BalloonAF01.SetActive(false);
                                break;
                            case 2:
                                print("F2Quit");
                                fAnimator2.SetInteger("Burst", 2);
                                BalloonAF02.SetActive(false);
                                break;
                            case 3:
                                print("F3Quit");
                                fAnimator3.SetInteger("Burst", 2);
                                BalloonAF03.SetActive(false);
                                break;
                            case 4:
                                print("M1Quit");
                                mAnimator1.SetInteger("Burst", 2);
                                BalloonAM01.SetActive(false);
                                break;
                            case 5:
                                print("M3Quit");
                                mAnimator3.SetInteger("Burst", 2);
                                BalloonAM03.SetActive(false);
                                break;
                        }
                    }
                    yield return new WaitForSeconds(0.1f);
                    fAnimator1.SetInteger("Burst", 0);
                    fAnimator2.SetInteger("Burst", 0);
                    fAnimator3.SetInteger("Burst", 0);
                    mAnimator1.SetInteger("Burst", 0);
                    //mAnimator2.SetInteger("Burst", 0);
                    mAnimator3.SetInteger("Burst", 0);

                }
                //yield return new WaitForSeconds(0.02f);  // temporal resolution for updating the experiment! It can't be less than "Time.deltaTime", which is the refresh time of the screen!
            }
            //print(111111111);
            StopCoroutine(b);     // Agents' Balloons start to expand
        }
        textComponent_trial.text = "Total Score: " + trialCounter;
        WriteCSV(responses, numberofTrials);
        Application.Quit();
        #endregion
        #region quit the experiment when all trials are completed
        if (trialCounter == numberofTrials)
        {
            Application.Quit();
        }
        #endregion
    }


    IEnumerator AgentsBalloonsInflate(int tC, GameObject ballF01, GameObject ballF02, GameObject ballF03, GameObject ballM01, GameObject ballM03, Text text_RF01, Text text_RF02, Text text_RF03, Text text_RM01, Text text_RM03)
    {
        float F01Reward;
        float F02Reward;
        float F03Reward;
        float M01Reward;
        float M03Reward;
        #region agents' balloons
        ballF01.transform.localScale = new Vector3(0f, 0f, 0f);
        ballF02.transform.localScale = new Vector3(0f, 0f, 0f);
        ballF03.transform.localScale = new Vector3(0f, 0f, 0f);
        ballM01.transform.localScale = new Vector3(0f, 0f, 0f);
        ballM03.transform.localScale = new Vector3(0f, 0f, 0f);

        ballF01.transform.localPosition = new Vector3(0.001724656f, 0.005630539f, 0.01340624f);
        ballF02.transform.localPosition = new Vector3(0.001876524f, -0.006168162f, 0.02477407f);
        //ballF03.transform.localPosition = new Vector3(-0.04902704f, -0.01289766f, 0.04051427f);
        ballF03.transform.localPosition = new Vector3(-0.024f, -0.009f, 0.036f);
        ballM01.transform.localPosition = new Vector3(-0.07173828f, 0.006605522f, 0.04090688f);
        ballM03.transform.localPosition = new Vector3(0.00562296f, -0.005356297f, 0.02521138f);

        ballF01.transform.localRotation = Quaternion.Euler(-9.062f, 110.723f, -178.902f);
        ballF02.transform.localRotation = Quaternion.Euler(-9.127f, 117.849f, 179.97f);
        ballF03.transform.localRotation = Quaternion.Euler(-170.884f, 294.755f, 0.4609985f);
        ballM01.transform.localRotation = Quaternion.Euler(-171.355f, 289.385f, 1.259995f);
        ballM03.transform.localRotation = Quaternion.Euler(-171.373f, 306.836f, 0.4166667f);
        //................................................................................................................................
        refTime3 = Time.time;
        while (Time.time - refTime3 < 25)
        {
            BScaleF01 = (float)blowSpeed[tC, 0] * 3;
            scaleChangeF01 = new Vector3(BScaleF01, BScaleF01, BScaleF01);
            ballF01.transform.localScale += scaleChangeF01;
            currentSizeF01 = new Vector3(ballF01.transform.localScale[0], ballF01.transform.localScale[1], ballF01.transform.localScale[2]);
            F01Reward = Mathf.RoundToInt(currentSizeF01[1] * 2);
            text_RF01.text = ""+F01Reward;
            //................................................................................................................................
            BScaleF02 = (float)blowSpeed[tC, 1] * 3;
            scaleChangeF02 = new Vector3(BScaleF02, BScaleF02, BScaleF02);
            ballF02.transform.localScale += scaleChangeF02;
            currentSizeF02 = new Vector3(ballF02.transform.localScale[0], ballF02.transform.localScale[1], ballF02.transform.localScale[2]);
            F02Reward = Mathf.RoundToInt(currentSizeF02[1] * 2);
            text_RF02.text = "" + F02Reward;
            //................................................................................................................................
            BScaleF03 = (float)blowSpeed[tC, 2] * 3;
            scaleChangeF03 = new Vector3(BScaleF03, BScaleF03, BScaleF03);
            ballF03.transform.localScale += scaleChangeF03;
            currentSizeF03 = new Vector3(ballF03.transform.localScale[0], ballF03.transform.localScale[1], ballF03.transform.localScale[2]);
            F03Reward = Mathf.RoundToInt(currentSizeF03[1] * 2);
            text_RF03.text = "" + F03Reward;
            //................................................................................................................................
            BScaleM01 = (float)blowSpeed[tC, 3] * 3;
            scaleChangeM01 = new Vector3(BScaleM01, BScaleM01, BScaleM01);
            ballM01.transform.localScale += scaleChangeM01;
            currentSizeM01 = new Vector3(ballM01.transform.localScale[0], ballM01.transform.localScale[1], ballM01.transform.localScale[2]);
            M01Reward = Mathf.RoundToInt(currentSizeM01[1] * 2);
            text_RM01.text = "" + M01Reward;
            //................................................................................................................................
            BScaleM03 = (float)blowSpeed[tC, 5] * 3;
            scaleChangeM03 = new Vector3(BScaleM03, BScaleM03, BScaleM03);
            ballM03.transform.localScale += scaleChangeM03;
            currentSizeM03 = new Vector3(ballM03.transform.localScale[0], ballM03.transform.localScale[1], ballM03.transform.localScale[2]);
            M03Reward = Mathf.RoundToInt(currentSizeM03[1] * 2);
            text_RM03.text = "" + M03Reward;
            #endregion
            yield return new WaitForSeconds(0.02f);
        }
    }

    IEnumerator AgentsBalloonsCollapse(int BalloonIndex, GameObject ballF001, GameObject ballF002, GameObject ballF003, GameObject ballM001, GameObject ballM003)
    {
        #region agents' balloons
        refTime4 = Time.time;
        switch (BalloonIndex)
        {
            case 1:
                while (ballF001.transform.localScale[0] >= 0.1)
                {
                    currentSizeF01 = new Vector3(ballF001.transform.localScale[0], ballF001.transform.localScale[1], ballF001.transform.localScale[2]);
                    BScaleF01 = 0.1f;
                    scaleChangeF01 = new Vector3(BScaleF01, BScaleF01, BScaleF01);
                    ballF001.transform.localScale -= scaleChangeF01;
                }
                BalloonAF01.SetActive(false);
                break;
            case 2:
                while (ballF002.transform.localScale[0] >= 0.1)
                {
                    currentSizeF02 = new Vector3(ballF002.transform.localScale[0], ballF002.transform.localScale[1], ballF002.transform.localScale[2]);
                    BScaleF02 = 0.1f;
                    scaleChangeF02 = new Vector3(BScaleF02, BScaleF02, BScaleF02);
                    ballF002.transform.localScale -= scaleChangeF02;
                }
                BalloonAF02.SetActive(false);
                break;
            case 3:
                while (ballF003.transform.localScale[0] >= 0.1)
                {
                    currentSizeF03 = new Vector3(ballF003.transform.localScale[0], ballF003.transform.localScale[1], ballF003.transform.localScale[2]);
                    BScaleF03 = 0.1f;
                    scaleChangeF03 = new Vector3(BScaleF03, BScaleF03, BScaleF03);
                    ballF003.transform.localScale -= scaleChangeF03;
                }
                BalloonAF03.SetActive(false);
                break;
            case 4:
                while (ballM001.transform.localScale[0] >= 0.1)
                {
                    currentSizeM01 = new Vector3(ballM001.transform.localScale[0], ballM001.transform.localScale[1], ballM001.transform.localScale[2]);
                    BScaleM01 = 0.1f;
                    scaleChangeM01 = new Vector3(BScaleM01, BScaleM01, BScaleM01);
                    ballM001.transform.localScale -= scaleChangeM01;
                }
                BalloonAM01.SetActive(false);
                break;
            case 5:
                while (ballM003.transform.localScale[0] >= 0.1)
                {
                    currentSizeM03 = new Vector3(ballM003.transform.localScale[0], ballM003.transform.localScale[1], ballM003.transform.localScale[2]);
                    BScaleM03 = 0.1f;
                    scaleChangeM03 = new Vector3(BScaleM03, BScaleM03, BScaleM03);
                    ballM003.transform.localScale -= scaleChangeM03;
                }
                BalloonAM03.SetActive(false);
                break;
        }
            #endregion
            yield return new WaitForSeconds(0.02f);
    }




    public void WriteCSV(float[,,,,] CSVresponses, int TCN)
    {
        print("Hooray");
        TextWriter tw = new StreamWriter(filename, false);
        tw.WriteLine("Time, Size, BurstIndex, trial Reward, total Reward");
        tw.Close();

        tw = new StreamWriter(filename, true);
        print(filename);

        for (int TC = 0; TC < 150; TC++)
        {
            print(TC);
            tw.WriteLine(CSVresponses[0, 0, 0, TC, 0] + "," + CSVresponses[0, 0, 0, TC, 1] + "," + CSVresponses[0, 0, 0, TC, 2] + "," + CSVresponses[0, 0, 0, TC, 3] + "," + CSVresponses[0, 0, 0, TC, 4]);
        }
        tw.Close();
    }
}